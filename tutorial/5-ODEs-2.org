#+startup: beamer

* Numerical ODE integrators @@latex:| \footnotesize{Yi Zhang}@@
<<chap:num_ode>>
** Nonlinear ODEs without analytical solution
*** kinetics of an autocatalytic reaction cite:robertson_numerical_1966
The structure of the reactions is 
\begin{equation*}
A \xrightarrow{k_1} B,\quad
B+B \xrightarrow{k_2} C + B,\quad
B+C \xrightarrow{k_3} C + A,
\end{equation*}
where $k_1$, $k_2$, $k_3$ are the rate
constants and $A$, $B$ and $C$ are the chemical species
involved. The corresponding ODEs are
\begin{align*}
x_1' &= -k_1x_1 + k_3x_2x_3\\
x_2' &=  k_1x_1 - k_2x_2^2 - k_3x_2x_3\\
x_3' &=  k_2x_2^2
\end{align*}
Given $k_1=0.04, k_2=3.0e7, k_3=1.0e4$, we make inference
regarding the initial condition for $x_1(t=0)$.
** Nonlinear ODEs without analytical solution
\begin{align*}
x_1' &= -k_1x_1 + k_3x_2x_3\\
x_2' &=  k_1x_1 - k_2x_2^2 - k_3x_2x_3\\
x_3' &=  k_2x_2^2
\end{align*}
Given $k_1=0.04, k_2=3.0e7, k_3=1.0e4$, we make inference
regarding the initial condition for $x_1(t=0)$.
*** Exercise 4
Write Stan function for the above ODE's RHS.

** Stan function for autocatalytic kinetics
\begin{align*}
x_1' &= -k_1x_1 + k_3x_2x_3\\
x_2' &=  k_1x_1 - k_2x_2^2 - k_3x_2x_3\\
x_3' &=  k_2x_2^2
\end{align*}

#+begin_src stan
  functions{
    real[] reaction(real t, real[] x, real[] theta, real[] r, int[] i){
      real dxdt[3];
      real k1 = theta[1];
      real k2 = theta[2];
      real k3 = theta[3];
      dxdt[1] = -k1*x[1] + k3*x[2]*x[3];
      dxdt[2] =  k1*x[1] - k3*x[2]*x[3] - k2*(x[2])^2;
      dxdt[3] =  k2*(x[2])^2;
      return dxdt;
    }
  }
#+end_src   
- What's the initial conditions for $x_2$ and $x_3$?

** Numerical integrators
    - Runge-Kutta 4th/5th (=rk45=)
      + non-stiff equations
      + Most popular, try this if you don't know the nature of the ODE, or what you're doing, or both.
    - Backward differentiation formula (=bdf=)
      + stiff equations
      + More expensive to use
    - Adams-Moulton
      + non-stiff equations
      + higher-order of accuracy(do you really need it?)
      + scales better with number of steps

** Numerical integrators

| Integrators | Stan                  | Torsten                   |
|-------------+-----------------------+---------------------------|
| =rk45=      | =integrate_ode_rk45=  | =pmx_integrate_ode_rk45=  |
| =BDF=       | =integrate_ode_bdf=   | =pmx_integrate_ode_bdf=   |
| =Adams=     | =integrate_ode_adams= | =pmx_integrate_ode_adams= |

#+begin_src stan
  real[ , ] pmx_integrate_ode_rk45(ODE_RHS, real[] y0, real t0, real[] ts, real[] theta, real[] x_r, int[] x_i, real rtol = 1.e-6, real atol = 1.e-6, int max_step = 1e6);
#+end_src
- =ODE_RHS=: ODE right-hand-side $f$ in $y' = f(y, t, \theta, x_r, x_i)$.
- =y0=: initial condition at time =t0=.
- =t0=: initial time.
- =ts=: times at which we require a solution.
- =theta=: parameters to be passed to $f$.
- =x_r=: real data to be passed to $f$.
- =x_i=: integer data to be passed to $f$.


** Model
- In each of 8 experiments performed $x3$ is observed.
- Hierarchical model for $x0[1]$
#+BEGIN_SRC stan
  model {
    y0_mu ~ lognormal(log(2.0), 0.5);
    for (i in 1:nsub) {
      y0_1[i] ~ lognormal(y0_mu, 0.5);    
    }
    sigma ~ cauchy(0, 0.5); 
    obs ~ lognormal(log(x3), sigma);
  }
#+END_SRC

** Data
*** Data available for the inference
#+BEGIN_SRC stan
  data {
    int<lower=1> nsub;       /* nb. of subjects */
    int<lower=1> len[nsub];  /* nb. of results-extraction time points for each subject */
    int<lower=1> ntot;       /* total nb. of results-extraction time points */
    real ts[ntot];           /* concatenated array for results-extraction time points */
    real obs[ntot];          /* concatenated array for observed x3 */
  }
#+END_SRC

** Exercise 5
***  Given above data and model, write the rest of Stan code.
- Hint: use =chem.stan= as template, also see =chem.data.R= and =chem.init.R=.
- Reaction begins with $A$(on which is also what we'd
  like to make inference), the other two spiecies are
  non-existent at the beginning of the reaction.
- Which numerical integrator are you using? Why?

** Exercise 5
How to build & run?
**** Edit/Add =cmdstan/make/local=
#+BEGIN_SRC sh
  TORSTEN_MPI = 1  # flag on torsten's MPI solvers
  CXXFLAGS += -isystem /usr/local/include    # path to MPI library's headers
#+END_SRC
**** Build in =cmdstan=
#+BEGIN_SRC sh
  make path_to_workshop/RScript/model/chemical_reactions/chem
#+END_SRC
**** Run
#+BEGIN_SRC sh
./chem sample adapt delta=0.95 random seed=1104508041 data file=chem.data.R init=chem.init.R
#+END_SRC



